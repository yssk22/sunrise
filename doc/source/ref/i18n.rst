.. highlight:: javascript

Internationalization
===============================================================================

Detect User Locales
-------------------------------------------------------------------------------

You can get the user locale string detected by ``Accept`` header from the request object.

::

    app.get('/', function(req, res, next){
       // get the local string such as 'en', 'en-US', 'ja', 'ja-JP'
       var locale = req.locale;
    });

Localization
-------------------------------------------------------------------------------

.. warn:: Not implemented yet.


Multilingualization
-------------------------------------------------------------------------------

At first, you specify the message bundle directory path by ``ddoc.m10n`` property.

::

   // app.js
   ddoc.m10n = '_attachments/messages/'


In this case, ``'dirname(app.js)/_attachments/messagse'`` is a directory that contains message bundle files for each locale.

Then prepare ``'dirname(app.js)/_attachments/messagse/{locale}.json`` you use for localization.

For example, ``en.json``, used for users whose locale is 'en', is as follows:

::

   // en.json
   {
       "msgId1" : "Your Message 1",
       "msgId2" : "Your Message 2",
   }

and ``ja.json`` is as follows:

::

   // ja.json
   {
       "msgId1" : "メッセージ1",
       "msgId2" : "メッセージ2",
   }

Now you can ``'msgId1'`` and ``'msgId2'`` on your view file with the ``_`` helper.

..  code-block:: html

    // view.ejs
    <p><%= _('msgId1') %></p>

If the user locale is resolved as ``'en'``, then the output response is ``<p>Your Message 1</p>``. If it is resolved as ``'ja'``, then the output is ``<p>メッセージ1</p>``.


